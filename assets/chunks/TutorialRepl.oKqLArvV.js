import{R as Z,o as z,_ as Y,b as Q,r as X,a as ss}from"./utils.2P_zrqee.js";import{i as W,p as P,a as v,V as es,b as O,c as R,d as is,_ as ts,e as as,f as ns,g as ls}from"./theme.Hrsqg5Nn.js";import{d as L,r as D,u as os,D as rs,g as M,o as d,e as N,w as $,c as g,z as s,F as H,f as b,a as i,t as T,T as ps,B as J,C as G,_ as V,A as hs,j as A,y as q,q as f,n as U,a9 as cs,p as ds,m as I,K as ks}from"./framework.a5IFYzQQ.js";const y=JSON.parse(`{"step-1":{"App":{"template.html":"<h1>Hello World!</h1>\\r\\n"},"description.md":"<h1 id=\\"getting-started\\" tabindex=\\"-1\\">Getting Started <a class=\\"header-anchor\\" href=\\"#getting-started\\" aria-label=\\"Permalink to &quot;Getting Started {#getting-started}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<p>Welcome to the Vue tutorial!</p>\\n<p>The goal of this tutorial is to quickly give you an experience of what it feels like to work with Vue, right in the browser. It does not aim to be comprehensive, and you don't need to understand everything before moving on. However, after you complete it, make sure to also read the <a target=\\"_blank\\" href=\\"/guide/introduction.html\\">Guide</a> which covers each topic in more detail.</p>\\n<h2 id=\\"prerequisites\\" tabindex=\\"-1\\">Prerequisites <a class=\\"header-anchor\\" href=\\"#prerequisites\\" aria-label=\\"Permalink to &quot;Prerequisites {#prerequisites}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>The tutorial assumes basic familiarity with HTML, CSS and JavaScript. If you are totally new to front-end development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</p>\\n<h2 id=\\"how-to-use-this-tutorial\\" tabindex=\\"-1\\">How to Use This Tutorial <a class=\\"header-anchor\\" href=\\"#how-to-use-this-tutorial\\" aria-label=\\"Permalink to &quot;How to Use This Tutorial {#how-to-use-this-tutorial}&quot;\\">&ZeroWidthSpace;</a></h2>\\n<p>You can edit the code <span class=\\"wide\\">on the right</span><span class=\\"narrow\\">below</span> and see the result update instantly. Each step will introduce a core feature of Vue, and you will be expected to complete the code to get the demo working. If you get stuck, you will have a &quot;Show me!&quot; button that reveals the working code for you. Try not to rely on it too much - you'll learn faster by figuring things out on your own.</p>\\n<p>If you are an experienced developer coming from Vue 2 or other frameworks, there are a few settings you can tweak to make the best use of this tutorial. If you are a beginner, it's recommended to go with the defaults.</p>\\n<details>\\n<summary>Tutorial Setting Details</summary>\\n<ul>\\n<li>\\n<p>Vue offers two API styles: Options API and Composition API. This tutorial is designed to work for both - you can choose your preferred style using the <strong>API Preference</strong> switches at the top. <a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">Learn more about API styles</a>.</p>\\n</li>\\n<li>\\n<p>You can also switch between SFC-mode or HTML-mode. The former will show code examples in <a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">Single-File Component</a> (SFC) format, which is what most developers use when they use Vue with a build step. HTML-mode shows usage without a build step.</p>\\n</li>\\n</ul>\\n<div class=\\"html\\">\\n<div class=\\"tip custom-block\\"><p class=\\"custom-block-title\\">TIP</p>\\n<p>If you're about to use HTML-mode without a build step in your own applications, make sure you either change imports to:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ... } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue/dist/vue.esm-bundler.js'</span></span></code></pre>\\n</div><p>inside your scripts or configure your build tool to resolve <code>vue</code> accordingly. Sample config for <a href=\\"https://vitejs.dev/\\" target=\\"_blank\\" rel=\\"noreferrer\\">Vite</a>:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// vite.config.js</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  resolve: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    alias: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      vue: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'vue/dist/vue.esm-bundler.js'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>See the respective section in Tooling guide for more information.</p>\\n</div>\\n</div>\\n</details>\\n<p>Ready? Click &quot;Next&quot; to get started.</p>\\n"},"step-2":{"App":{"composition.js":"import { ref } from 'vue'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    // component logic\\r\\n    // declare some reactive state here.\\r\\n\\r\\n    return {\\r\\n      // exposed to template\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  // component options\\r\\n  // declare some reactive state here.\\r\\n}\\r\\n","template.html":"<h1>Make me dynamic!</h1>\\r\\n"},"description.md":"<h1 id=\\"declarative-rendering\\" tabindex=\\"-1\\">Declarative Rendering <a class=\\"header-anchor\\" href=\\"#declarative-rendering\\" aria-label=\\"Permalink to &quot;Declarative Rendering {#declarative-rendering}&quot;\\">&ZeroWidthSpace;</a></h1>\\n<div class=\\"sfc\\">\\n<p>What you see in the editor is a Vue Single-File Component (SFC). An SFC is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written inside a <code>.vue</code> file.</p>\\n</div>\\n<p>The core feature of Vue is <strong>declarative rendering</strong>: using a template syntax that extends HTML, we can describe how the HTML should look like based on JavaScript state. When the state changes, the HTML updates automatically.</p>\\n<div class=\\"composition-api\\">\\n<p>State that can trigger updates when changed are considered <strong>reactive</strong>. We can declare reactive state using Vue's <code>reactive()</code> API. Objects created from <code>reactive()</code> are JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noreferrer\\">Proxies</a> that work just like normal objects:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { reactive } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(counter.count) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">counter.count</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">++</span></span></code></pre>\\n</div><p><code>reactive()</code> only works on objects (including arrays and built-in types like <code>Map</code> and <code>Set</code>). <code>ref()</code>, on the other hand, can take any value type and create an object that exposes the inner value under a <code>.value</code> property:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">import</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> { ref } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">from</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'vue'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">console.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">log</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(message.value) </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#6A737D\\">// \\"Hello World!\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">message.value </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">=</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\"> 'Changed'</span></span></code></pre>\\n</div><p>Details on <code>reactive()</code> and <code>ref()</code> are discussed in <a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">Guide - Reactivity Fundamentals</a>.</p>\\n<div class=\\"sfc\\">\\n<p>Reactive state declared in the component's <code>&lt;script setup&gt;</code> block can be used directly in the template. This is how we can render dynamic text based on the value of the <code>counter</code> object and <code>message</code> ref, using mustaches syntax:</p>\\n</div>\\n<div class=\\"html\\">\\n<p>The object being passed to <code>createApp()</code> is a Vue component. A component's state should be declared inside its <code>setup()</code> function, and returned using an object:</p>\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">setup</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> counter</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> reactive</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({ count: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\">0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> })</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  const</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#79B8FF\\"> message</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> =</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\"> ref</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">  return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    counter,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    message</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div><p>Properties in the returned object will be made available in the template. This is how we can render dynamic text based on the value of <code>message</code>, using mustaches syntax:</p>\\n</div>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>count is: {{ counter.count }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">p</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><p>Notice how we did not need to use <code>.value</code> when accessing the <code>message</code> ref in templates: it is automatically unwrapped for more succinct usage.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>State that can trigger updates when changed are considered <strong>reactive</strong>. In Vue, reactive state is held in components. <span class=\\"html\\">In the example code, the object being passed to <code>createApp()</code> is a component.</span></p>\\n<p>We can declare reactive state using the <code>data</code> component option, which should be a function that returns an object:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">export</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\"> default</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">}</span></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">createApp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">({</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">  data</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">() {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#F97583\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\"> {</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">      message: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">'Hello World!'</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">})</span></span></code></pre>\\n</div></div>\\n<p>The <code>message</code> property will be made available in the template. This is how we can render dynamic text based on the value of <code>message</code>, using mustaches syntax:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div></div>\\n<p>The content inside the mustaches is not limited to just identifiers or paths - we can use any valid JavaScript expression:</p>\\n<div class=\\"language-template vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre class=\\"shiki shiki-themes github-light github-dark vp-code\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">&#x3C;</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">>{{ message.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">split</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">''</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">).</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">reverse</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#B392F0\\">join</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#9ECBFF\\">''</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">) }}&#x3C;/</span><span style=\\"--shiki-light:#22863A;--shiki-dark:#85E89D\\">h1</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E1E4E8\\">></span></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>Now, try to create some reactive state yourself, and use it to render dynamic text content for the <code>&lt;h1&gt;</code> in the template.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>Now, try to create a data property yourself, and use it as the text content for the <code>&lt;h1&gt;</code> in the template.</p>\\n</div>\\n","_hint":{"App":{"composition.js":"import { reactive, ref } from 'vue'\\r\\n\\r\\nexport default {\\r\\n  setup() {\\r\\n    const counter = reactive({ count: 0 })\\r\\n    const message = ref('Hello World!')\\r\\n\\r\\n    return {\\r\\n      counter,\\r\\n      message\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","options.js":"export default {\\r\\n  data() {\\r\\n    return {\\r\\n      message: 'Hello World!',\\r\\n      counter: {\\r\\n        count: 0\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","template.html":"<h1>{{ message }}</h1>\\r\\n<p>Count is: {{ counter.count }}</p>\\r\\n"},"description.md":{}}}}`),S=k=>(J("data-v-2b002713"),k=k(),G(),k),us={key:0,class:"preference-tooltip"},gs=S(()=>i("p",null,"API style now defaults to Composition API.",-1)),Es=S(()=>i("p",null," Some pages contain different content based on the API style chosen. Use this switch to toggle between APIs styles. ",-1)),ms=S(()=>i("p",null," This is different from your saved preference and will only affect the current browsing session. ",-1)),ys=S(()=>i("a",{href:"/guide/introduction#api-styles"},"Learn more",-1)),vs=S(()=>i("div",{class:"arrow-top"},null,-1)),fs=S(()=>i("div",{class:"arrow-top inner"},null,-1)),bs=L({__name:"PreferenceTooltip",setup(k){const u=D(!1),{page:C}=os();let r=W&&localStorage.getItem(P)===null?"default":!1;if(W){const p=location.search.match(/[\?&]api=(\w+)/),l=p&&p[1];if(l==="composition")c(!0,"url-query");else if(l==="options")c(!1,"url-query");else if(location.hash){const o=h(C.value.headers,location.hash);o&&o.optionsOnly?c(!1,"url-header"):o&&o.compositionOnly&&c(!0,"url-header")}}function h(p,l){for(const o of p){if(o.link===l)return o;if(o.children){const E=h(o.children,l);if(E)return E}}}function c(p,l){p&&!v.value?(r=l,v.value=!0,document.documentElement.classList.add("prefer-composition")):!p&&v.value&&(r=l,v.value=!1,document.documentElement.classList.remove("prefer-composition"))}rs(()=>{if(!C.value.relativePath.startsWith("tutorial/")&&r!==!1){u.value=!0;const p=M(v,()=>{u.value=!1,p()})}});function F(){u.value=!1,r==="default"&&localStorage.setItem(P,String(v.value))}return(p,l)=>(d(),N(ps,{name:"fly-in"},{default:$(()=>[u.value?(d(),g("div",us,[s(r)==="default"?(d(),g(H,{key:0},[gs,Es],64)):b("",!0),s(r)&&s(r).startsWith("url")?(d(),g(H,{key:1},[i("p",null," Showing content for "+T(s(v)?"Composition":"Options")+" API because "+T(s(r)==="url-query"?"it is specified by the URL query.":"the target section is only available for that API."),1),ms],64)):b("",!0),i("p",{class:"actions"},[ys,i("button",{onClick:F},"Got it")]),vs,fs])):b("",!0)]),_:1}))}}),Cs=V(bs,[["__scopeId","data-v-2b002713"]]),Fs=k=>(J("data-v-7c1eeb58"),k=k(),G(),k),ws={key:0,class:"preference-switch"},_s=["aria-expanded"],As=Fs(()=>i("span",null,"API Preference",-1)),Ss=["hidden","aria-hidden"],xs={class:"switch-container"},Ds={key:0,class:"switch-container"},Ts=L({__name:"PreferenceSwitch",setup(k){const u=hs(),C=A(()=>/^\/(guide|tutorial|examples|style-guide)\//.test(u.path)),r=A(()=>!/^\/guide|style-guide/.test(u.path));let h=D(!0);const c=()=>{h.value=!h.value},F=m=>{m.target.classList.add("no-outline")},p=m=>{m.target.classList.remove("no-outline")},l=x(P,v,"prefer-composition"),o=x(is,R,"prefer-sfc"),E=q("close-sidebar");function x(m,e,a){if(typeof localStorage>"u")return()=>{};const w=document.documentElement.classList;return(j=!e.value)=>{(e.value=j)?w.add(a):w.remove(a),localStorage.setItem(m,String(e.value))}}return(m,e)=>C.value?(d(),g("div",ws,[i("button",{class:"toggle","aria-label":"preference switches toggle","aria-controls":"preference-switches","aria-expanded":s(h),onClick:c,onMousedown:F,onBlur:p},[As,f(s(es),{class:U(["vt-link-icon",{open:s(h)}])},null,8,["class"])],40,_s),i("div",{id:"preference-switches",hidden:!s(h),"aria-hidden":!s(h)},[i("div",xs,[i("label",{class:"options-label",onClick:e[0]||(e[0]=a=>s(l)(!1))},"Options"),f(s(O),{class:"api-switch","aria-label":"prefer composition api","aria-checked":s(v),onClick:e[1]||(e[1]=a=>s(l)())},null,8,["aria-checked"]),i("label",{class:"composition-label",onClick:e[2]||(e[2]=a=>s(l)(!0))},"Composition"),i("a",{class:"switch-link",title:"About API preference",href:"/guide/introduction.html#api-styles",onClick:e[3]||(e[3]=(...a)=>s(E)&&s(E)(...a))},"?"),f(Cs)]),r.value?(d(),g("div",Ds,[i("label",{class:"no-sfc-label",onClick:e[4]||(e[4]=a=>s(o)(!1))},"HTML"),f(s(O),{class:"sfc-switch","aria-label":"prefer single file component","aria-checked":s(R),onClick:e[5]||(e[5]=a=>s(o)())},null,8,["aria-checked"]),i("label",{class:"sfc-label",onClick:e[6]||(e[6]=a=>s(o)(!0))},"SFC"),i("a",{class:"switch-link",title:"About SFC",href:"/guide/scaling-up/sfc.html",onClick:e[7]||(e[7]=(...a)=>s(E)&&s(E)(...a))},"?")])):b("",!0)],8,Ss)])):b("",!0)}}),js=V(Ts,[["__scopeId","data-v-7c1eeb58"]]),Bs={class:"tutorial"},Is=["innerHTML"],Ps={key:0,class:"hint"},$s=["href"],Hs=["href"],qs=L({__name:"TutorialRepl",setup(k){const u=new Z({defaultVueRuntimeURL:`https://unpkg.com/vue@${cs}/dist/vue.esm-browser.js`}),C=D(),r=q("prefer-composition"),h=q("prefer-sfc"),c=D(""),F=Object.keys(y).sort((n,t)=>Number(n.replace(/^step-/,""))-Number(t.replace(/^step-/,""))),p=F.length,l=/<h1.*?>(.+?)<a class="header-anchor/,o=F.map((n,t)=>{const _=y[n]["description.md"];return{text:`${t+1}. ${_.match(l)[1]}`,link:`#${n}`}}),E=A(()=>{var n;return(n=y[c.value])==null?void 0:n["description.md"]}),x=A(()=>F.indexOf(c.value)+1),m=A(()=>{const n=c.value.match(/\d+/),t=n&&`step-${+n[0]-1}`;if(t&&y.hasOwnProperty(t))return t}),e=A(()=>{const n=c.value.match(/\d+/),t=n&&`step-${+n[0]+1}`;if(t&&y.hasOwnProperty(t))return t}),a=D(!1);function w(n=!1){let t=location.hash.slice(1);y.hasOwnProperty(t)||(t="step-1",location.hash=`#${t}`),c.value=t;const _=a.value?y[t]._hint:y[t];u.setFiles(h.value?X(_,r.value):ss(_,r.value),h.value?"App.vue":"index.html"),n&&ks(()=>{C.value.scrollTop=0})}function j(){a.value=!a.value,w()}return M([r,h],()=>w()),z(()=>{a.value=!1,w(!0)}),w(),(n,t)=>{var _;return d(),g("section",Bs,[i("article",{class:"instruction",ref_key:"instruction",ref:C},[f(js),f(s(as),{button:`${x.value} / ${s(p)}`},{default:$(()=>[(d(!0),g(H,null,ds(s(o),(B,K)=>(d(),N(s(ts),{class:U(["vt-menu-link",{active:K+1===x.value}]),href:B.link},{default:$(()=>[I(T(B.text),1)]),_:2},1032,["class","href"]))),256))]),_:1},8,["button"]),i("div",{class:"vt-doc",innerHTML:E.value},null,8,Is),(_=s(y)[c.value])!=null&&_._hint?(d(),g("div",Ps,[i("button",{onClick:j},T(a.value?"Reset":"Show me!"),1)])):b("",!0),i("footer",null,[m.value?(d(),g("a",{key:0,href:`#${m.value}`},[f(s(ns),{class:"vt-link-icon",style:{margin:"0"}}),I(" Prev")],8,$s)):b("",!0),e.value?(d(),g("a",{key:1,class:"next-step",href:`#${e.value}`},[I("Next "),f(s(ls),{class:"vt-link-icon"})],8,Hs)):b("",!0)])],512),f(s(Q),{layout:"vertical",editor:s(Y),store:s(u),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:t[0]||(t[0]=B=>a.value=!1)},null,8,["editor","store"])])}}}),Os=V(qs,[["__scopeId","data-v-c9f4005d"]]);export{Os as default};
